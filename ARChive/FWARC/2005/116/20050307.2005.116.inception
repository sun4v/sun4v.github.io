Inception: 2005/116 sunv4 core API
Submitter:  john.johnson@sun.com
Owner:      Tony Sumpter
Intern:	    Stephen Ehring       	

JJ gave an overview about the project. The following is summary of his
overview:

* This case defines the core APIs for a sun4v guest. They allow the guest to 
manipulate its virtual machine without knowledge of the underlying HW
implementation.

* These APIs will be implemented by a firmware layer called a hypervisor, 
which 
is delivered with the HW platform.

* The main direct consumer of these APIs will be the platform FW (OBP).  
Solaris 
will also use them both directly and indirectly through OBP client 
interfaces.

* These APIs will not be visible to user SW, and should require no changes 
to 
ABI compliant applications.

* APIs that are under FWARC review can be divided into three categories:
  * Core
  * PCI
  * Platform specific APIs 

DMK: Versioning API isn't done yet. There is a core API that will be used
by OBP and there are other APIs that will be used by OBP. The later will
be for another case.

Guest will include OBP and the kernel. The kernel needs to negotiate with
OBP and there will be a syscall for that. 

API doc that is used for today's meeting is located at:
http://sac.eng/arc/FWARC/2005/116/inception.materials/api.pdf
 
Issues
------

Project team -- 

1. API versioning

Status: Open. Project team is still working on this and needs to resolve 
this
for commitment time.
 
2. mmu_demap_*
    (use of cpulist)

STATUS: Open. The use of cpulist is not well defined and does not match 
the single 'cpu' arguments in the APS's. This issue needs to be
resolved by the project team before commitment review.

JJ: The current implementation of hypervisor does not even use cpulist. Only
mmu functions use cpulist arguments.

3. memory_scrub
    (definining error boundaries - this one will go to the SWG working group 
- 
the call convention and errors will not change ... just the normative text 
on 
behaviour)

4. memory_sync
    same as 3 above.
    
Status: Open. Project team needs to resolve this before commitment time or 
they 
can remove these and fast-track it later. This depends on how complicated 
the 
issue is. 

David Kahn --

3.2. Technical
	Delete NVRAM_READ & NVRAM_WRITE from function number table.
	Delete CPU_WATCHDOG
	
6.2.4 and 6.2.4.1 Technical
	Delete cpu_watchdog API

Status: The above two issues can be closed once the project team has
resubmitted an API specification with the offending sections and table 
entries removed.


5.1.1. API Version (issue already flagged by project team) - Technical
	Contains the old text and the new text.

Status: CLOSED - merged with project team issue. 

6.1. CPU List - Technical

	I believe this was also flagged by the project team.
	The description of the cpu list is vague and doesn't
	match the single 'cpu' arguments in the api's listed
	below it.
	
Status: CLOSED - merged with project team issue. 

6.2.9. Editorial

	CPU_MONDO_SEND is listed as CPU_SEND_MONDO in the
	function number table in 3.2

Status: CLOSED. The above issue can be closed once the project team has
resubmitted an API specification with the error corrected.
--

Hitendra Zhangada

1.  I think there are some interfaces which are from HV to Guest,
     e.g., traps from HV on errors etc.  Which specification/ARC case
     defines these interfaces?

DMK: There is an error API, but there is no case yet for this API.
The definition of the API will exist by commitment review.

JJ: Will need to put the error description to the spec by commitment review.

DMK: Or you can put it in a separate case. Either way, the answer will exist
by commitment time. 

Status: OPEN. Project team should create a section '1.1' that calls out 
all related FWARC cases. Other FWARC cases that are related to this one 
and producing their own specs may want to leverage this section.

2.  Similarly what specification/ARC case defines the HV and Guest
     to SP interface (mailbox etc.)?  Is the vBSC case defines these
     interfaces?

JJ: Ontario specific interface will go to the Ontario case. Redman will
write about this interface.

Status: Closed - N/A for this case.

3.  What specification/ARC case defines the SP CLIs?

Tom: There is no change in the CLIs.

Status: Closed - N/A for this case, this is Ontario project question.

Note: This project is using ALOM.
--

Hitu: Now some comments and questions related to core API specification,
version 0.16 dated March 2, 2005 (I have not looked at the latest
spec. which got copied in the case directory late last week).

4.  Section 3.2, we probably want to create registry so that new
     API function numbers can be added and are managed via registry.

Status: OPEN. The case owner, intern and Hitu will work with the project 
team to create a registry of all trap numbers and function numbers used by 
the 
sun4v API. The registry will state that re-use of function numbers is not 
allowed.

5.  Section 4 can probably be deleted since machine descriptor
     will have its own specification and ARC case.

Status: CLOSED - this has changed in the March 4th version of doc. 

6.  Section 5.1.1, it is not clear how the version# is established
     at start of day by guest.  Some explanation on this would be useful.
     Since there HV can interrupt guests, does the API version cover
     the HV to guest interfaces as well?  Can HV send interrupts to
     guest before the version# is established?  Also, it seems like
     guest can not use any of the APIs until the version# is
     established, is this true?

Status: CLOSED - there is another issue # covers version related API.

7.  Section 5.1.2, the description states that all cpus are stopped.
     How does HV do this?  Does it use CPU xcalls?

JJ's response: Yes. 

Status: CLOSED - answered to satisfaction via email.

8.  Section 5.1.4, the second last sentence in the description states
     that, "...  real trap table (rtba) entry point on one of the CPUs.
     Is this "one" a typo for "all"?  The description prior to this
     sentence talks about capturing all CPUs etc.

JJ: Only one CPU is restarted.  The rest must be re-started with
cpu_start.

DMK: Specify how this API works.

Status: OPEN

9.  Section 6.1, is the CPU id referred in the CPU list the same as
     the CPUID (interruptable ID)? or the one assigned by HV in the
     cpu_myid?  I think it is the later, right?  Either way, I think
     a description on what is CPU id would be nice in this section.

Status: CLOSED - will combine with team issue on cpulist.

For issues #8 and 9 above, the project team needs to elaborate 
on the wording of those sections to anwser the questions. Once that has 
been done, these issues can be closed.


10.  Section 6.2.4, Is there a way to set MAX value for the watchdog
      time out?  Can we have -1 = MAX value?  Since the EINVAL is
      returned for "too long" there seems to be a per implementation
      MAX value.  Is there a way for guest to find out the max value?

JJ: Additional support that requires watchdog support 

Status: CLOSED - will extend the spec if necessary to cover cpu watchdog
API.

11.  Section 6.2.4, the single line paragraph states that " ..  the
      previously specified time-out period", this sentence is not
      clear, I think the sentence needs to be "Upon success the service
      returns seconds remaining from the previous time-out period".

Status: CLOSED - duplicate issue from #10. 

12.  Section 7.1.1, the first sentence is not clear due to spelling
      errors.

Status: OPEN. Hitu will work with project team on this error
 

13.  Section 7.2, the second table, the last row on the page 16,
      what does "so" stand for in "so page"?  What is "so page"?

Status: OPEN.Hitu will work with project team on this issue on the wordings

14.  Section 7.3.6 and 7.3.7, I think the description should also
      mentioned something about the single unified I and D TLBs.
      A description similar to 7.3.8 related to single unified TLB
      is needed for these sections.

JJ's response: We should have a single introductory statement that describes 
how the mmu flags argument works for those APIs that use it.

Will call it mmu instead of TLB.  

DMK: We should have unified wordings, does not need to mention TLB at all.

Status: OPEN. The project team should have a single introductory statement 
that describes how the mmu flags argument works for those APIs that 
use it. Once the project team completes this and resubmits the API 
spec, this issue can be closed.

15.  Section 7.3.11, I do not understand the second paragraph related
      to avoiding complicated address mapping issues.  What complications
      does this refer to?

JJ: To make this work without a return_target, you need to run the
MMU enable code in a 1-1 map like native OBP now does.  The paragraph
is probably a bit too foreboarding.

Status: OPEN. The project team will fix the wording to clarify 
'complications'. Issue can be closed once new spec is submitted.

16.  Section 12, is the HV dump part of Solaris dump?  How does user
      access HV dump information?  Are there any changes to existing
      tools related to guest OS (Solaris) dumps?
      
Status: CLOSED - this has been clarified in the spec.
--

Tony Sumpter

() refs to api.pdf Rev 0.16 dated March 4, 2005

Issue #0 --

Tony: Since the idea is to implement these APIs in the hardware, shouldn't 
their definitions be as rigorous as the ones that exist for the hardware? 
Therefore, many of his issues are related to this. 

R: Project team agreed on Tony's issues list.

AI: Tony will work together with project team to resolve all of his issues.
--

DMK suggested as the case owner, his issues should be resolved prior to
the meeting. 

1.
(2.) "0x80 and above" -> "0x80 to 0xff inclusive"
     "faster form" -> "hyper-fast form"
(2.1) "instruction semantics" -> "function semantics"
(2.2) "instruction semantics" -> "function semantics"

2.
(2.1) Need to clarify whether all of %o0 through %o4 are always volatile
or only the ones explicitly used by the function.
Need to clarify if return status is always set.

3.
(2.1) Need to clarify if further arguments in memory are allowed or not
with hyper-fast traps. 

3.
(2.2) Need to clarify whether all of %o0 through %o4 are always volatile
or only the ones explicitly used by the function.
Need to clarify which outputs are always set.
Need to clarify %o5 output.
Need to clarify if return status is always set.

Ash: Section 2.1 stated that "These registers should be considered volatile 
across the call unless explicitly stated as part of the instruction 
semantics. All other registers are preserved across the function call, 
unless explicitly stated otherwise as part of the function semantics." The 
Big Rule at this time is %o4 gets trashed unless function call preserved it. 

DMK: Why are you modifying an argument that won't be resolved? 

Tony: We need a general rule for this. 
 
Status: OPEN - project team will clarify this and work with Tony offline. 

4.
(2.3) "any additional result value being returned in %o1" is
inconsistent with rest of paragraph and preceding tables.

5.
(3.) Need to specify how unused trap numbers and function numbers are 
assigned 
for API extensions. Need to specify if platform specific
APIs can re-use numbers.

Tony: We need a Big Rule on this. If you have function numbers, you don't 
need to do anything else. 

DMK: There won't be duplicate function numbers because a registry will be 
created.

Tony did not want two platforms using the same number for different things. 

Redman: FWARC won't let that happen because we have registry. 

DMK: That will be part of the opinion - advice about registry. 

6.
(3.1) Need to say something about 0x86 through 0xfe.

AI: Tony and Ash will work this offline. 
--

7.
(3.2) Need to specify how many bits in %o5 the function number is.
Need to say something about the numbers which are not listed.

Tony: There should not be a suggestion, you can not implement based
on it.

JJ: 64 bits. 

Tony: Need to specify specific number - the correct number: 64 bits.  

8.
(3.3) Need to specify how many bits in the return status are significant.
Need to say something about the numbers which are not listed.

Same answer as response #7

9.
(4.) Machine description will be required for completeness.

10.
(?) Relationship to the sun4v architecture spec (or SunSPARC 2.0)
needs to be noted.

11.
(5.) For all API entries, the number of bits in each argument
that are significant needs to be stated. [PRM style bit layouts
might be appropriate.]

12.
(5.) A more rigorous enumeration of domain state is required. These
states to be related to the sun4v architecure spec.

13.
(5.1.2) "service processor" is not defined in the document.

Ash proposed to change it to service entity. 

Status: OPEN - will work it out with project team. 

14.
(5.1.2) Need a description of exit_code values somewhere which includes
unrequested exits.

15.
(5.1.3) No algorithm for determining the complete size of the machine
description is given.

16.
(5.1.4) An exact description of the state after SIR needs to be provided
as part of the resolution to issue 12 above. Eg register states.

17.
(5.1.4) What happens if the processor cannot support SIR?

18.
(6.) A more rigorous enumeration of CPU state is required.

19.
(6.2.1) What is the state of %npc, %pstate, etc.?

20.
(6.2.2) "running state" is not mentioned in (6.)

Tony: All state definitions such as: CPU, running state need to be explained 
in more details. 

Other issues which are not resolved in this meeting are editorials - Tony 
and project team will work these out.   

Redman: Don't forget to add guest watchdog definition as well.  

THE NEXT STEP
=============
Tony will work all issues raised with the project team and with Hitu, as 
well on resolving his issues. 

==========================================================================